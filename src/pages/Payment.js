import React, { useState, useEffect } from "react";
import { useHistory } from "react-router-dom";
import { FastField, Form, Formik } from "formik";
import * as Yup from "yup";
import { ToastContainer, toast } from "react-toastify";
import package_img from "../assets/img/logo-ameritec.png";
import SelectField from "../components/CustomFields/select-field";
import Spinner from "../components/Spinner";
import { BANK } from "../constants/bank";
import PAYPAL_IMG from "../assets/img/paypal.png";
import VISA_IMG from "../assets/img/visa-card-1.png";
import MASTER_IMG from "../assets/img/mastercard.png";
import AMERICAN_IMG from "../assets/img/american-express.png";
import DISCOVER_IMG from "../assets/img/discover-card.png";
import API from "../api/API";
import { useTranslation } from "react-i18next";
import PayPal from "../components/PayPal";
import {
  Button,
  Label,
  Input,
  Modal,
  ModalHeader,
  ModalBody,
} from "@windmill/react-ui";
import InputField from "../components/CustomFields/input-field";

function Payment({ match }) {
  const { t, i18n } = useTranslation();
  const transId = match.params.id;
  const history = useHistory();
  const [isNLATM, setIsNLATM] = useState(false);
  const [isChooseMethod, setIsChooseMethod] = useState(false);
  const [showErrChooseMethod, setShowErrChooseMethod] = useState(false);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [total_amount, setTotalAmount] = useState(0);
  const [buy_package, setBuyPackage] = useState(0);
  const [loading, setLoading] = useState(false);
  const [checkout, setCheckOut] = useState(false);
  const [openMoneyChase, setOpenMoneyChase] = useState(false);
  const [openChangePage, setOpenChangePage] = useState(false);
  const [url, setUrl] = useState("");
  const [onCredit, setOnCredit] = useState(false);

  const initialValues = {
    id: transId,
    country: i18n.language.includes("vi") ? "VN" : "USA",
    payment_method: "",
    bank_code: "",
  };

  const creditInitialValues = {
    trans_id: transId,
    card_number: "",
    name_on_card: "",
    expiry: "",
    cvc: "",
  };

  const creditValidationSchema = Yup.object().shape({
    card_number: Yup.string().max(16).min(16).label("Card number").required(),
    cvc: Yup.string().label("CVC").min(3).max(4).required(),
    name_on_card: Yup.string().label("Name").required(),
    expiry: Yup.string().label("Expiry").min(4).max(5).required(),
  });

  useEffect(() => {
    document.title = "Ameritec || " + t("Thanh To√°n");
    let message = t("ƒê√£ x·∫£y ra l·ªói vui l√≤ng th·ª≠ l·∫°i sau");
    API.checkTransId({ transId })
      .then((res) => {
        const status = res.data.status;
        if (status === 200) {
          let { user_name, phone, amount_usd, amount_vnd, buy_package, email } =
            res.data.data.trans;
          setName(user_name);
          setPhone(phone);
          setEmail(email);
          setBuyPackage(buy_package);
          setTotalAmount(
            i18n.language.includes("vi") ? amount_vnd : amount_usd
          );
        } else {
          history.push("/");
        }
      })
      .catch((err) => {
        console.log(err);
        toast.error(message);
      });
  }, []);

  const validationSchema = Yup.object().shape({
    // payment_method: Yup.string().required(
    //   "Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n"
    // ),
    country: Yup.string().required("Vui l√≤ng ch·ªçn Qu·ªëc Gia"),
    bank_code: isNLATM
      ? Yup.string().required("Vui l√≤ng ch·ªçn ng√¢n h√†ng")
      : Yup.string().nullable(),
  });

  const handleSubmit = async (values, actions) => {
    const body = { ...values };
    if (!isChooseMethod) {
      setShowErrChooseMethod(true);
      return;
    }
    let message = t("ƒê√£ x·∫£y ra l·ªói vui l√≤ng th·ª≠ l·∫°i sau");
    setLoading(true);

    API.transaction(body)
      .then((res) => {
        const status = res.data.status;
        if (status && status !== 200) {
          for (const error of res.data.errors) {
            toast.error(error.err_message);
            actions.setFieldError(error.label, error.err_message);
          }
          actions.setSubmitting(false);
        } else {
          actions.setSubmitting(false);
          if (res.data.data.payment_method === "tienmat") {
            setOpenMoneyChase(true);
          } else if (
            res.data.data.payment_method === "nganluong" ||
            res.data.data.payment_method === "nganluongvisa"
          ) {
            actions.setSubmitting(false);
            setUrl(res.data.data.checkoutUrl);
            setOpenChangePage(true);
          }
        }
      })
      .catch((err) => {
        console.log(err);
        toast.error(message);
        actions.setSubmitting(false);
      });
  };

  const handleSubmitCredit = (values, actions) => {
    console.log("credit submited :", values);
    API.payWithCredit(values)
      .then((res) => {
        const status = res.data.status;
        if (status && status === 200) {
          toast.success(res.data.message);
          actions.setSubmitting(false);
          let url = res.data.data.url;
          history.push(url);
        } else {
          toast.error(res.data.message);
          for (var err of res.data.errors) {
            actions.setFieldError(err.label, err.err_message);
          }
          actions.setSubmitting(false);
        }
      })
      .catch((err) => {
        console.log(err);
        actions.setSubmitting(false);
      });
  };

  const onCancelCredit = () => {
    setOnCredit(false);
  };

  return (
    <div className="flex min-h-screen md:p-6 bg-gray-50 ">
      <Modal isOpen={openMoneyChase}>
        <ModalHeader className="text-center mb-4">
          üéâ {t("Th√¥ng B√°o")} üéâ
        </ModalHeader>
        <ModalBody>
          <div className="text-lg md:text-xl flex flex-col justify-center">
            {i18n.language === "vi" && (
              <p>
                Giao d·ªãch c·ªßa b·∫°n ƒë√£ v√†o tr·∫°ng th√°i ch·ªù! Vui l√≤ng thanh to√°n ƒë·ªÉ
                ƒë∆∞·ª£c k√≠ch ho·∫°t. B·∫°n c√≥ th·ªÉ thanh to√°n t·∫°i VƒÉn Ph√≤ng C√¥ng Ty ho·∫∑c
                chuy·ªÉn kho·∫£n qua s·ªë t√†i kho·∫£n: 118002775135, ng√¢n h√†ng:
                VietinBank, T√™n t√†i kho·∫£n: C√îNG TY C·ªî PH·∫¶N AMERITEC
              </p>
            )}
            <br />
            <p className="text-center">
              {t(
                "T√†i kho·∫£n sau khi x√°c nh·∫≠n xong s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o v·ªÅ Email m√† b·∫°n ƒë√£ ƒëƒÉng k√Ω!"
              )}
            </p>
            <h4 className="text-center mt-2">{t("Xin C·∫£m ∆†n")} üòä</h4>
            <Button
              className="mt-2 md:mt-4 m-auto"
              onClick={() => {
                history.push("/login");
              }}
            >
              {t("ƒê√≥ng")}
            </Button>
          </div>
        </ModalBody>
      </Modal>
      <Modal isOpen={openChangePage}>
        <ModalBody>
          <div className="flex flex-col justify-center">
            <Button>
              <a className="text-white" href={url}>
                Thanh to√°n
              </a>
            </Button>
          </div>
        </ModalBody>
      </Modal>
      <ToastContainer />
      <div className="flex-1 h-full max-w-4xl mx-auto overflow-hidden bg-white rounded-lg lg:shadow-xl ">
        <main className="flex p-6">
          <div className="w-full">
            <div className="flex justify-between items-center">
              <h1 className="text-3xl font-semibold text-gray-700 ">
                {t("Thanh To√°n")}
              </h1>
            </div>
            <hr className="my-4" />

            <Formik
              initialValues={initialValues}
              validationSchema={validationSchema}
              onSubmit={handleSubmit}
            >
              {(formikProps) => {
                const { isSubmitting, setFieldValue } = formikProps;

                return (
                  <Form className="flex justify-center flex-col">
                    <div className="main w-full mb-4">
                      <div className="flex items-center w-full">
                        <div className="rounded-md mr-6">
                          <img
                            src={package_img}
                            alt="package"
                            width="100px"
                            className="object-fit rounded-md"
                          />
                        </div>
                        {buy_package === "1" && (
                          <h5 className="font-semibold">{t("G√≥i C√° Nh√¢n")}</h5>
                        )}
                        {buy_package === "2" && (
                          <h5 className="font-semibold">{t("G√≥i Gia ƒê√¨nh")}</h5>
                        )}
                        {buy_package === "3" && (
                          <h5 className="font-semibold">
                            {t("G√≥i Doanh Nghi·ªáp")}
                          </h5>
                        )}
                      </div>
                    </div>
                    <div className="mt-3 w-full">
                      <label className="flex text-md text-gray-700 dark:text-gray-400">
                        <span className="mr-2">{t("H·ªç v√† t√™n")} : </span>
                        <span className="font-semibold">{name}</span>
                      </label>
                    </div>
                    <div className="mt-3 w-full">
                      <label className="flex text-md text-gray-700 dark:text-gray-400">
                        <span className="mr-2">Email : </span>
                        <span className="font-semibold">{email}</span>
                      </label>
                    </div>

                    <div className="mt-3 w-full">
                      <label className="flex text-md text-gray-700 dark:text-gray-400">
                        <span className="mr-2">{t("S·ªë ƒëi·ªán tho·∫°i")} : </span>
                        <span className="font-semibold">{phone}</span>
                      </label>
                    </div>

                    <div className="mt-3 w-full">
                      <label className="flex text-md text-gray-700 dark:text-gray-400">
                        <span className="mr-2">{t("T·ªïng s·ªë ti·ªÅn")} : </span>
                        <span className="font-semibold">
                          {total_amount
                            .toString()
                            .replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}{" "}
                          {i18n.language.includes("vi") ? "VNƒê" : "USD"}
                        </span>
                      </label>
                    </div>

                    <FastField
                      component={SelectField}
                      name="country"
                      type="text"
                      placeholder="Vi·ªát Nam"
                      options={[
                        { value: "VN", label: "Vi·ªát Nam" },
                        { value: "USA", label: "The United States of America" },
                      ]}
                      label={t("Qu·ªëc gia")}
                    />
                    {isNLATM && (
                      <FastField
                        component={SelectField}
                        name="bank_code"
                        placeholder={t("Ch·ªçn ng√¢n h√†ng")}
                        options={BANK}
                        label={t("Ng√¢n H√†ng")}
                      />
                    )}

                    <div className="grouped fields mt-4">
                      <label htmlFor="fruit">
                        {t("Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n")}: (?)
                      </label>

                      <div className="flex flex-col mt-3">
                        <Label radio className="flex items-center mt-2 text-md">
                          <Input
                            type="radio"
                            className="border border-gray-700"
                            name="payment_method"
                            value="tienmat"
                            onChange={(e) => {
                              setIsChooseMethod(true);
                              setShowErrChooseMethod(false);
                              setFieldValue("payment_method", e.target.value);
                              setIsNLATM(false);
                            }}
                          />
                          <span className="m-0 ml-2">{t("Ti·ªÅn m·∫∑t")}</span>
                        </Label>
                        {i18n.language.includes("vi") && (
                          <>
                            <Label
                              radio
                              className="flex items-center mt-2 text-md"
                            >
                              <Input
                                type="radio"
                                className="border border-gray-700"
                                name="payment_method"
                                value="nganluong"
                                onChange={(e) => {
                                  setIsChooseMethod(true);
                                  setShowErrChooseMethod(false);
                                  setFieldValue(
                                    "payment_method",
                                    e.target.value
                                  );
                                  setIsNLATM(!isNLATM);
                                }}
                              />
                              <span className="m-0 ml-2">Ng√¢n L∆∞·ª£ng (ATM)</span>
                            </Label>
                            <Label radio className="flex items-center mt-2">
                              <Input
                                type="radio"
                                className="border border-gray-700"
                                name="payment_method"
                                value="nganluongvisa"
                                onChange={(e) => {
                                  setIsChooseMethod(true);
                                  setFieldValue(
                                    "payment_method",
                                    e.target.value
                                  );
                                  setIsNLATM(false);
                                }}
                              />
                              <span className="m-0 ml-2 text-md">
                                Ng√¢n L∆∞·ª£ng (VISA)
                              </span>
                            </Label>
                          </>
                        )}
                      </div>
                      {showErrChooseMethod && (
                        <div className="mt-4 text-red-500">
                          Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
                        </div>
                      )}
                    </div>
                    <br />
                    {/* {
                      i18n.language.includes('vi') && */}
                    <Button
                      type="submit"
                      className="mt-4"
                      block
                      disabled={loading}
                    >
                      {loading ? (
                        <Spinner />
                      ) : (
                        <i className="fas fa-sign-in-alt  w-6 -ml-2 mx-3" />
                      )}
                      {t("Thanh To√°n ƒê∆°n H√†ng")}
                    </Button>
                    {/* } */}
                  </Form>
                );
              }}
            </Formik>

            {!i18n.language.includes("vi") && (
              <div className="my-6">
                <Button size="large" onClick={() => setOnCredit(true)}>
                  Pay with Credit card
                </Button>
                <div className="flex gap-2 mt-2">
                  <div className="flex justify-center items-center">
                    <img src={VISA_IMG} width={100} height="auto" />
                  </div>
                  <div className="flex justify-center items-center">
                    <img src={MASTER_IMG} width={100} height="auto" />
                  </div>
                  <div className="flex justify-center items-center">
                    <img src={DISCOVER_IMG} width={100} height="auto" />
                  </div>
                  <div className="flex justify-center items-center">
                    <img src={AMERICAN_IMG} width={100} height="auto" />
                  </div>
                </div>
                <Modal isOpen={onCredit} onClose={onCancelCredit}>
                  <ModalHeader>
                    <p className="text-center mb-4 text-lg font-semibold">
                      Pay with Credit Card
                    </p>
                  </ModalHeader>
                  <ModalBody>
                    <Formik
                      initialValues={creditInitialValues}
                      validationSchema={creditValidationSchema}
                      onSubmit={handleSubmitCredit}
                    >
                      {(formikProps) => {
                        const { values, isSubmitting } = formikProps;
                        return (
                          <Form>
                            <div>
                              <FastField
                                component={InputField}
                                name="card_number"
                                type="text"
                                placeholder="Card Number"
                                label="Card Number"
                              />
                              <FastField
                                component={InputField}
                                name="name_on_card"
                                type="text"
                                placeholder="Name"
                                label="Name"
                              />
                              <div className="flex gap-2">
                                <FastField
                                  component={InputField}
                                  name="expiry"
                                  type="text"
                                  placeholder="Valid Thru (Ex: 22/25)"
                                  label="Expiry"
                                />
                                <FastField
                                  component={InputField}
                                  name="cvc"
                                  type="text"
                                  placeholder="CVC"
                                  label="CVC"
                                />
                              </div>
                            </div>
                            {isSubmitting && (
                              <p text="sm text-red my-2 mx-auto">
                                Please don't click Close button
                              </p>
                            )}
                            <div className="flex justify-center">
                              <Button
                                type="submit"
                                className="mt-2 m-auto"
                                disabled={isSubmitting}
                              >
                                {isSubmitting ? (
                                  <Spinner />
                                ) : (
                                  <i className="fas fa-sign-in-alt  w-6 -ml-2 mx-3" />
                                )}
                                Submit
                              </Button>
                            </div>
                          </Form>
                        );
                      }}
                    </Formik>
                  </ModalBody>
                </Modal>
              </div>
            )}
            {!i18n.language.includes("vi") && <hr className="my-2" />}
            {!i18n.language.includes("vi") && (
              <div className="my-6">
                {checkout ? (
                  <PayPal trans_id={transId} price={total_amount} />
                ) : (
                  <div>
                    <Button
                      size="large"
                      className="appearance-none"
                      onClick={() => {
                        setCheckOut(true);
                      }}
                    >
                      Pay with PayPal
                    </Button>
                    <div className="mt-2">
                      <img src={PAYPAL_IMG} className="w-40" />
                      <p className="font-bold mt-2 text-sm">
                        Pay by PayPal, additional fees 4.59%
                      </p>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </main>
      </div>
    </div>
  );
}

export default Payment;
